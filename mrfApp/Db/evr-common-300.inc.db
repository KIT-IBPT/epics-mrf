# Clock control register (only for -300 series devices).

record(bi, "$(P)$(R)EventClock:ClkCleanerPLL:Locked") {
  field(DESC, "Clock cleaner PLL locked?")
  field(DTYP, "MRF Memory")
  field(INP,  "@$(DEVICE) 0x0050[31] uint32")
  field(SCAN, "1 second")
  field(ZNAM, "Not locked")
  field(ONAM, "Locked")
}

record(mbbo, "$(P)$(R)EventClock:ClkCleanerPLL:BandwidthSel") {
  field(DESC, "SiLabs Si5317 bandwidth select")
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x0050[30:28] uint32")
  field(ZRVL, "0")
  field(ZRST, "HM")
  field(ONVL, "1")
  field(ONST, "HL")
  field(TWVL, "2")
  field(TWST, "MH")
  field(THVL, "3")
  field(THST, "MM")
  field(FRVL, "4")
  field(FRST, "ML")
}

# Data buffer segment interrupt enable registers.

# Each bit of the four records enables the data buffer interrupt for one 16 byte
# segment of the data buffer memory. Unlike the reference manual, we use the
# segment addresses instead of the segment numbers for identifying the segments.

# TODO It seems like these registers has been moved from address 0x0780 to
# 0x8f80. The old addresses were used in firmware 0201, the new one are used in
# firmware 0207.

record(longout, "$(P)$(R)IRQ:DataBuffer:Enabled:000To1FF") {
  field(DESC, "Data buf. IRQ en. addrs. 0x000 to 0x1ff")
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x0780 uint32")
}

record(longout, "$(P)$(R)IRQ:DataBuffer:Enabled:200To3FF") {
  field(DESC, "Data buf. IRQ en. addrs. 0x200 to 0x3ff")
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x0784 uint32")
}

record(longout, "$(P)$(R)IRQ:DataBuffer:Enabled:400To5FF") {
  field(DESC, "Data buf. IRQ en. addrs. 0x400 to 0x5ff")
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x0788 uint32")
}

record(longout, "$(P)$(R)IRQ:DataBuffer:Enabled:600To7FF") {
  field(DESC, "Data buf. IRQ en. addrs. 0x600 to 0x7ff")
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x078c uint32")
}

# Data buffer checksum flag registers.

# Polling the checksum error flag with a fixed rate does not make sense.
# An application should trigger processing when needed. We do not link the
# records either beause an application might only be interested in a few of the
# segments. Checksum errors can be reset by writing a one to the corresponding
# bit

# TODO It seems like these registers has been moved from address 0x07a0 to
# 0x8fa0. The old addresses were used in firmware 0201, the new one are used in
# firmware 0207.

record(longin, "$(P)$(R)DataBuffer:RX:ChecksumError:000To1FF") {
  field(DESC, "Checksum err. addrs. 0x000 to 0x1ff?")
  field(DTYP, "MRF Memory")
  field(INP,  "@$(DEVICE) 0x07a0 uint32")
}

record(longout, "$(P)$(R)DataBuffer:RX:ChecksumError:000To1FF:Rst") {
  field(DESC, "Res. chksum err. addrs. 0x000 to 0x1ff")
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x07a0 uint32 no_verify")
}

record(longin, "$(P)$(R)DataBuffer:RX:ChecksumError:200To3FF") {
  field(DESC, "Checksum err. addrs. 0x200 to 0x3ff?")
  field(DTYP, "MRF Memory")
  field(INP,  "@$(DEVICE) 0x07a4 uint32")
}

record(longout, "$(P)$(R)DataBuffer:RX:ChecksumError:200To3FF:Rst") {
  field(DESC, "Res. chksum err. addrs. 0x200 to 0x3ff")
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x07a4 uint32 no_verify")
}

record(longin, "$(P)$(R)DataBuffer:RX:ChecksumError:400To5FF") {
  field(DESC, "Checksum err. addrs. 0x400 to 0x5ff?")
  field(DTYP, "MRF Memory")
  field(INP,  "@$(DEVICE) 0x07a8 uint32")
}

record(longout, "$(P)$(R)DataBuffer:RX:ChecksumError:400To5FF:Rst") {
  field(DESC, "Res. chksum err. addrs. 0x400 to 0x5ff")
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x07a8 uint32 no_verify")
}

record(longin, "$(P)$(R)DataBuffer:RX:ChecksumError:600To7FF") {
  field(DESC, "Checksum err. addrs. 0x600 to 0x7ff?")
  field(DTYP, "MRF Memory")
  field(INP,  "@$(DEVICE) 0x07ac uint32")
}

record(longout, "$(P)$(R)DataBuffer:RX:ChecksumError:600To7FF:Rst") {
  field(DESC, "Res. chksum err. addrs. 0x600 to 0x7ff")
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x07ac uint32 no_verify")
}

# Data buffer overflow flag registers.

# These registers work in the same way as the checksum flag registers, but they
# signal an overflow condition instead of a checksum error. An overflow
# condition is triggered when a data buffer segment is overwritten before an
# earlier write has been acknowledged by resetting the "received" flag (see
# below).

# TODO It seems like these registers has been moved from address 0x07c0 to
# 0x8fc0. The old addresses were used in firmware 0201, the new one are used in
# firmware 0207.

record(longin, "$(P)$(R)DataBuffer:RX:Overflow:000To1FF") {
  field(DESC, "Dbuf. overflow addrs. 0x000 to 0x1ff?")
  field(DTYP, "MRF Memory")
  field(INP,  "@$(DEVICE) 0x07c0 uint32")
}

record(longout, "$(P)$(R)DataBuffer:RX:Overflow:000To1FF:Rst") {
  field(DESC, "Reset overflow addrs. 0x000 to 0x1ff")
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x07c0 uint32 no_verify")
}

record(longin, "$(P)$(R)DataBuffer:RX:Overflow:200To3FF") {
  field(DESC, "Dbuf. overflow addrs. 0x200 to 0x3ff?")
  field(DTYP, "MRF Memory")
  field(INP,  "@$(DEVICE) 0x07c4 uint32")
}

record(longout, "$(P)$(R)DataBuffer:RX:Overflow:200To3FF:Rst") {
  field(DESC, "Reset overflow addrs. 0x200 to 0x3ff")
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x07c4 uint32 no_verify")
}

record(longin, "$(P)$(R)DataBuffer:RX:Overflow:400To5FF") {
  field(DESC, "Dbuf. overflow addrs. 0x400 to 0x5ff?")
  field(DTYP, "MRF Memory")
  field(INP,  "@$(DEVICE) 0x07c8 uint32")
}

record(longout, "$(P)$(R)DataBuffer:RX:Overflow:400To5FF:Rst") {
  field(DESC, "Reset overflow addrs. 0x400 to 0x5ff")
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x07c8 uint32 no_verify")
}

record(longin, "$(P)$(R)DataBuffer:RX:Overflow:600To7FF") {
  field(DESC, "Dbuf. overflow addrs. 0x600 to 0x7ff?")
  field(DTYP, "MRF Memory")
  field(INP,  "@$(DEVICE) 0x07cc uint32")
}

record(longout, "$(P)$(R)DataBuffer:RX:Overflow:700To7FF:Rst") {
  field(DESC, "Reset overflow addrs. 0x600 to 0x7ff")
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x07cc uint32 no_verify")
}

# Data buffer receive flag registers.

# These registers work in the same way as the checksum flag registers, but they
# signal that data has been received. When data has been received for a segment,
# the corresponding bit is set. This bit can be reset by writing one to it. When
# a bit is not reset before new data arrives for the same segment, the overflow
# bit is set.

# TODO It seems like these registers has been moved from address 0x07e0 to
# 0x8fe0. The old addresses were used in firmware 0201, the new one are used in
# firmware 0207.

record(longin, "$(P)$(R)DataBuffer:RX:Received:000To1FF") {
  field(DESC, "Dbuf. received addrs. 0x000 to 0x1ff?")
  field(DTYP, "MRF Memory")
  field(INP,  "@$(DEVICE) 0x07e0 uint32")
}

record(longout, "$(P)$(R)DataBuffer:RX:Received:000To1FF:Rst") {
  field(DESC, "Reset received addrs. 0x000 to 0x1ff")
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x07e0 uint32 no_verify")
}

record(longin, "$(P)$(R)DataBuffer:RX:Received:200To3FF") {
  field(DESC, "Dbuf. received addrs. 0x200 to 0x3ff?")
  field(DTYP, "MRF Memory")
  field(INP,  "@$(DEVICE) 0x07e4 uint32")
}

record(longout, "$(P)$(R)DataBuffer:RX:Received:200To3FF:Rst") {
  field(DESC, "Reset received addrs. 0x200 to 0x3ff")
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x07e4 uint32 no_verify")
}

record(longin, "$(P)$(R)DataBuffer:RX:Received:400To5FF") {
  field(DESC, "Dbuf. received addrs. 0x400 to 0x5ff?")
  field(DTYP, "MRF Memory")
  field(INP,  "@$(DEVICE) 0x07e8 uint32")
}

record(longout, "$(P)$(R)DataBuffer:RX:Received:400To5FF:Rst") {
  field(DESC, "Reset received addrs. 0x400 to 0x5ff")
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x07e8 uint32 no_verify")
}

record(longin, "$(P)$(R)DataBuffer:RX:Received:600To7FF") {
  field(DESC, "Dbuf. received addrs. 0x600 to 0x7ff?")
  field(DTYP, "MRF Memory")
  field(INP,  "@$(DEVICE) 0x07ec uint32")
}

record(longout, "$(P)$(R)DataBuffer:RX:Received:600To7FF:Rst") {
  field(DESC, "Reset received addrs. 0x600 to 0x7ff")
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x07ec uint32 no_verify")
}

