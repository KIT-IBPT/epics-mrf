# Interrupt handling depends on how the device is accessed. VME devices are
# typically accessed with the UDP/IP-based protocol. In this case, there is no
# direct interrupt handling because the UDP/IP protocol does not provide a way
# for generating interrupts. Instead, we poll the interrupt flags periodically.
# There is also a record which can be used to trigger an immediate update of the
# interrupt flags.

# Interrupt flag register.

# Inside the device, the interrupt flags are not masked. This means that flags
# might be set even though the corresponding interrupt is not enabled. In order
# to get behavior that resembles the behavior when accessing a device via mmap()
# (in this case we can have direct interrupt handling), we internall calculate
# the interrupt mask and apply it to the flags read from the register. This way,
# flags will never be activated when the corresponding interrupt is not enabled
# (or interrupts are globally disabled).
#
# Even though we immediately reset interrupt flags in the hardware, we keep them
# set in the respective records until they are reset by the user. Otherwise,
# they would only be visible for a short period of time (until the register is
# read again).
#
# The bits in the interrupt flag register are:
#   13: Sequence RAM 1 sequence stop interrupt flag
#   12: Sequence RAM 0 sequence stop interrupt flag
#    9: Sequence RAM 1 sequence start interrupt flag
#    8: Sequence RAM 0 sequence start interrupt flag
#    6: External interrupt flag
#    5: Data buffer flag
#    1: Event FIFO full flag
#    0: Receiver violation flag
record(longin, "$(P)$(R)Intrnl:IRQStatus") {
  field(DTYP, "MRF Memory")
  field(INP,  "@$(DEVICE) 0x0008 uint32")
  field(FLNK, "$(P)$(R)Intrnl:IRQStatusReset")
}

record(bo, "$(P)$(R)IRQ:Status:Update") {
  field(DESC, "Trigger update of the interrupt flags")
  field(FLNK, "$(P)$(R)Intrnl:IRQStatus")
  field(ZNAM, "Update")
  field(ONAM, "Update")
}

# We use a default scan rate of 1 Hz, but the user can change this as needed.
record(fanout, "$(P)$(R)IRQ:Status:Scan") {
  field(DESC, "Periodically updates the IRQ flags")
  field(SCAN, "1 second")
  field(FLNK, "$(P)$(R)IRQ:Status:Update")
}

# Interrupt flags are reset by writing one to them. We write to all bits that
# were present in the status. This way, there is no risk of a race condition in
# which we would reset a flag indicating a condition that occurred after reading
# the flags.
record(longout, "$(P)$(R)Intrnl:IRQStatusReset") {
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x0008 uint32 no_verify")
  field(OMSL, "closed_loop")
  field(DOL,  "$(P)$(R)Intrnl:IRQStatus")
  field(FLNK, "$(P)$(R)Intrnl:IRQStatusUpdateMask")
}

record(seq, "$(P)$(R)Intrnl:IRQStatusUpdateMask") {
  field(DOL1, "$(P)$(R)IRQ:SeqRAM1Stop:Enabled")
  field(LNK1, "$(P)$(R)Intrnl:IRQStatusMask.BD")
  field(DOL2, "$(P)$(R)IRQ:SeqRAM0Stop:Enabled")
  field(LNK2, "$(P)$(R)Intrnl:IRQStatusMask.BC")
  field(DOL3, "$(P)$(R)IRQ:SeqRAM1Start:Enabled")
  field(LNK3, "$(P)$(R)Intrnl:IRQStatusMask.B9")
  field(DOL4, "$(P)$(R)IRQ:SeqRAM0Start:Enabled")
  field(LNK4, "$(P)$(R)Intrnl:IRQStatusMask.B8")
  field(DOL5, "$(P)$(R)IRQ:External:Enabled")
  field(LNK5, "$(P)$(R)Intrnl:IRQStatusMask.B6")
  field(DOL6, "$(P)$(R)IRQ:DataBuffer:Enabled")
  field(LNK6, "$(P)$(R)Intrnl:IRQStatusMask.B5")
  field(DOL7, "$(P)$(R)IRQ:EventFIFOFull:Enabled")
  field(LNK7, "$(P)$(R)Intrnl:IRQStatusMask.B1")
  field(DOL8, "$(P)$(R)IRQ:RXViolation:Enabled")
  field(LNK8, "$(P)$(R)Intrnl:IRQStatusMask.B0")
  field(FLNK, "$(P)$(R)Intrnl:IRQStatusMask")
}

record(mbboDirect, "$(P)$(R)Intrnl:IRQStatusMask") {
  field(DTYP, "Raw Soft Channel")
  field(FLNK, "$(P)$(R)Intrnl:IRQStatusCalc")
}

record(calc, "$(P)$(R)Intrnl:IRQStatusCalc") {
  field(CALC, "C?(A&B):0")
  field(INPA, "$(P)$(R)Intrnl:IRQStatus MSS")
  field(INPB, "$(P)$(R)Intrnl:IRQStatusMask.RVAL")
  field(INPC, "$(P)$(R)IRQ:Enabled")
  field(FLNK, "$(P)$(R)IRQ:Status")
}

record(mbbiDirect, "$(P)$(R)IRQ:Status") {
  field(DESC, "Interrupt flags")
  field(DTYP, "Raw Soft Channel")
  field(INP,  "$(P)$(R)Intrnl:IRQStatusCalc MSS")
  field(FLNK, "$(P)$(R)Intrnl:IRQUpdateSeqRAM1Stop")
}

record(calcout, "$(P)$(R)Intrnl:IRQUpdateSeqRAM1Stop") {
  field(CALC, "A || B")
  field(INPA, "$(P)$(R)IRQ:Status.BD MSS")
  field(INPB, "$(P)$(R)IRQ:SeqRAM1Stop:Status")
  field(OUT,  "$(P)$(R)IRQ:SeqRAM1Stop:Status MSS PP")
  field(FLNK, "$(P)$(R)Intrnl:IRQUpdateSeqRAM0Stop")
}

record(calcout, "$(P)$(R)Intrnl:IRQUpdateSeqRAM0Stop") {
  field(CALC, "A || B")
  field(INPA, "$(P)$(R)IRQ:Status.BC MSS")
  field(INPB, "$(P)$(R)IRQ:SeqRAM0Stop:Status")
  field(OUT,  "$(P)$(R)IRQ:SeqRAM0Stop:Status MSS PP")
  field(FLNK, "$(P)$(R)Intrnl:IRQUpdateSeqRAM1Start")
}

record(calcout, "$(P)$(R)Intrnl:IRQUpdateSeqRAM1Start") {
  field(CALC, "A || B")
  field(INPA, "$(P)$(R)IRQ:Status.B9 MSS")
  field(INPB, "$(P)$(R)IRQ:SeqRAM1Start:Status")
  field(OUT,  "$(P)$(R)IRQ:SeqRAM1Start:Status MSS PP")
  field(FLNK, "$(P)$(R)Intrnl:IRQUpdateSeqRAM0Start")
}

record(calcout, "$(P)$(R)Intrnl:IRQUpdateSeqRAM0Start") {
  field(CALC, "A || B")
  field(INPA, "$(P)$(R)IRQ:Status.B8 MSS")
  field(INPB, "$(P)$(R)IRQ:SeqRAM0Start:Status")
  field(OUT,  "$(P)$(R)IRQ:SeqRAM0Start:Status MSS PP")
  field(FLNK, "$(P)$(R)Intrnl:IRQUpdateExternal")
}

record(calcout, "$(P)$(R)Intrnl:IRQUpdateExternal") {
  field(CALC, "A || B")
  field(INPA, "$(P)$(R)IRQ:Status.B6 MSS")
  field(INPB, "$(P)$(R)IRQ:External:Status")
  field(OUT,  "$(P)$(R)IRQ:External:Status MSS PP")
  field(FLNK, "$(P)$(R)Intrnl:IRQUpdateDataBuffer")
}

record(calcout, "$(P)$(R)Intrnl:IRQUpdateDataBuffer") {
  field(CALC, "A || B")
  field(INPA, "$(P)$(R)IRQ:Status.B5 MSS")
  field(INPB, "$(P)$(R)IRQ:DataBuffer:Status")
  field(OUT,  "$(P)$(R)IRQ:DataBuffer:Status MSS PP")
  field(FLNK, "$(P)$(R)Intrnl:IRQUpdateEventFIFOFull")
}

record(calcout, "$(P)$(R)Intrnl:IRQUpdateEventFIFOFull") {
  field(CALC, "A || B")
  field(INPA, "$(P)$(R)IRQ:Status.B1 MSS")
  field(INPB, "$(P)$(R)IRQ:EventFIFOFull:Status")
  field(OUT,  "$(P)$(R)IRQ:EventFIFOFull:Status MSS PP")
  field(FLNK, "$(P)$(R)Intrnl:IRQUpdateRXViolation")
}

record(calcout, "$(P)$(R)Intrnl:IRQUpdateRXViolation") {
  field(CALC, "A || B")
  field(INPA, "$(P)$(R)IRQ:Status.B0 MSS")
  field(INPB, "$(P)$(R)IRQ:RXViolation:Status")
  field(OUT,  "$(P)$(R)IRQ:RXViolation:Status MSS PP")
}

record(bi, "$(P)$(R)IRQ:SeqRAM1Stop:Status") {
  field(DESC, "Seq. RAM 1 sequence stop flag")
  field(ZNAM, "Not set")
  field(ONAM, "Set")
}

record(bi, "$(P)$(R)IRQ:SeqRAM0Stop:Status") {
  field(DESC, "Seq. RAM 0 sequence stop flag")
  field(ZNAM, "Not set")
  field(ONAM, "Set")
}

record(bi, "$(P)$(R)IRQ:SeqRAM1Start:Status") {
  field(DESC, "Seq. RAM 1 sequence start flag")
  field(ZNAM, "Not set")
  field(ONAM, "Set")
}

record(bi, "$(P)$(R)IRQ:SeqRAM0Start:Status") {
  field(DESC, "Seq. RAM 1 sequence start flag")
  field(ZNAM, "Not set")
  field(ONAM, "Set")
}

record(bi, "$(P)$(R)IRQ:External:Status") {
  field(DESC, "External flag")
  field(ZNAM, "Not set")
  field(ONAM, "Set")
}

record(bi, "$(P)$(R)IRQ:DataBuffer:Status") {
  field(DESC, "Data buffer flag")
  field(ZNAM, "Not set")
  field(ONAM, "Set")
}

record(bi, "$(P)$(R)IRQ:EventFIFOFull:Status") {
  field(DESC, "Event FIFO full flag")
  field(ZNAM, "Not set")
  field(ONAM, "Set")
}

record(bi, "$(P)$(R)IRQ:RXViolation:Status") {
  field(DESC, "Receiver violation flag")
  field(ZNAM, "Not set")
  field(ONAM, "Set")
}

record(bo, "$(P)$(R)IRQ:SeqRAM1Stop:Status:Reset") {
  field(DESC, "Clear the seq. RAM 1 sequence stop flag")
  field(OUT,  "$(P)$(R)IRQ:SeqRAM1Stop:Status PP")
  field(OMSL, "closed_loop")
  field(DOL,  "$(P)$(R)Intrnl:False")
  field(ZNAM, "Reset")
  field(ONAM, "Reset")
}

record(bo, "$(P)$(R)IRQ:SeqRAM0Stop:Status:Reset") {
  field(DESC, "Clear the seq. RAM 0 sequence stop flag")
  field(OUT,  "$(P)$(R)IRQ:SeqRAM0Stop:Status PP")
  field(OMSL, "closed_loop")
  field(DOL,  "$(P)$(R)Intrnl:False")
  field(ZNAM, "Reset")
  field(ONAM, "Reset")
}

record(bo, "$(P)$(R)IRQ:SeqRAM1Start:Status:Reset") {
  field(DESC, "Clear the seq. RAM 1 seq. start flag")
  field(OUT,  "$(P)$(R)IRQ:SeqRAM1Start:Status PP")
  field(OMSL, "closed_loop")
  field(DOL,  "$(P)$(R)Intrnl:False")
  field(ZNAM, "Reset")
  field(ONAM, "Reset")
}

record(bo, "$(P)$(R)IRQ:SeqRAM0Start:Status:Reset") {
  field(DESC, "Clear the seq. RAM 0 seq. start flag")
  field(OUT,  "$(P)$(R)IRQ:SeqRAM0Start:Status PP")
  field(OMSL, "closed_loop")
  field(DOL,  "$(P)$(R)Intrnl:False")
  field(ZNAM, "Reset")
  field(ONAM, "Reset")
}

record(bo, "$(P)$(R)IRQ:External:Status:Reset") {
  field(DESC, "Clear the external flag")
  field(OUT,  "$(P)$(R)IRQ:External:Status PP")
  field(OMSL, "closed_loop")
  field(DOL,  "$(P)$(R)Intrnl:False")
  field(ZNAM, "Reset")
  field(ONAM, "Reset")
}

record(bo, "$(P)$(R)IRQ:DataBuffer:Status:Reset") {
  field(DESC, "Clear the data buffer flag")
  field(OUT,  "$(P)$(R)IRQ:DataBuffer:Status PP")
  field(OMSL, "closed_loop")
  field(DOL,  "$(P)$(R)Intrnl:False")
  field(ZNAM, "Reset")
  field(ONAM, "Reset")
}

record(bo, "$(P)$(R)IRQ:EventFIFOFull:Status:Reset") {
  field(DESC, "Clear the event FIFO full flag")
  field(OUT,  "$(P)$(R)IRQ:EventFIFOFull:Status PP")
  field(OMSL, "closed_loop")
  field(DOL,  "$(P)$(R)Intrnl:False")
  field(ZNAM, "Reset")
  field(ONAM, "Reset")
}

record(bo, "$(P)$(R)IRQ:RXViolation:Status:Reset") {
  field(DESC, "Clear the receiver violation flag")
  field(OUT,  "$(P)$(R)IRQ:RXViolation:Status PP")
  field(OMSL, "closed_loop")
  field(DOL,  "$(P)$(R)Intrnl:False")
  field(ZNAM, "Reset")
  field(ONAM, "Reset")
}

# Interrupt enable register.

# When using the UDP/IP-based protocol, enabling or disabling interrupts has not
# much of an effect because there is no interrupt handler. However, we use this
# information in order to determine which bits in the interrupt flag register
# should be masked. We also apply the settings to the hardware, just in case
# there is an unknown side effect of enabling or disabling interrupts.

record(bo, "$(P)$(R)IRQ:Enabled") {
  field(DESC, "Enable interrupts?")
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x000c[31] uint32")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
}

record(bo, "$(P)$(R)IRQ:SeqRAM1Stop:Enabled") {
  field(DESC, "Enable seq. RAM 1 stop sequence IRQ?")
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x000c[13] uint32")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
}

record(bo, "$(P)$(R)IRQ:SeqRAM0Stop:Enabled") {
  field(DESC, "Enable seq. RAM 0 stop sequence IRQ?")
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x000c[12] uint32")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
}

record(bo, "$(P)$(R)IRQ:SeqRAM1Start:Enabled") {
  field(DESC, "Enable seq. RAM 1 start sequence IRQ?")
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x000c[9] uint32")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
}

record(bo, "$(P)$(R)IRQ:SeqRAM0Start:Enabled") {
  field(DESC, "Enable seq. RAM 0 start sequence IRQ?")
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x000c[8] uint32")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
}

record(bo, "$(P)$(R)IRQ:External:Enabled") {
  field(DESC, "Enable external IRQ?")
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x000c[6] uint32")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
}

record(bo, "$(P)$(R)IRQ:DataBuffer:Enabled") {
  field(DESC, "Enable data buffer IRQ?")
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x000c[5] uint32")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
}

record(bo, "$(P)$(R)IRQ:EventFIFOFull:Enabled") {
  field(DESC, "Enable event FIFO full IRQ?")
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x000c[1] uint32")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
}

record(bo, "$(P)$(R)IRQ:RXViolation:Enabled") {
  field(DESC, "Enable receiver violation IRQ?")
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x000c[0] uint32")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
}

record(fanout, "$(P)$(R)Intrnl:WriteAll:IRQ") {
  field(LNK1, "$(P)$(R)IRQ:DataBuffer:Enabled")
  field(LNK2, "$(P)$(R)IRQ:Enabled")
  field(LNK3, "$(P)$(R)IRQ:EventFIFOFull:Enabled")
  field(LNK4, "$(P)$(R)IRQ:External:Enabled")
  field(LNK5, "$(P)$(R)IRQ:RXViolation:Enabled")
  field(LNK6, "$(P)$(R)IRQ:SeqRAM0Start:Enabled")
  field(FLNK, "$(P)$(R)Intrnl:WriteAll:IRQ:Fout1")
}

record(fanout, "$(P)$(R)Intrnl:WriteAll:IRQ:Fout1") {
  field(LNK1, "$(P)$(R)IRQ:SeqRAM1Start:Enabled")
  field(LNK2, "$(P)$(R)IRQ:SeqRAM0Stop:Enabled")
  field(LNK3, "$(P)$(R)IRQ:SeqRAM1Stop:Enabled")
}

# Event clock control register.

# The generic parts of this register are handled by the common file. The DCM
# flags, however, might only exist on certain hardware revisions. The EVG manual
# is not explicit regarding this question, but the EVR manual mentions these
# flags not being available on some hardware (cPCI EVR), so it seems logical
# that the same applies to the EVGs.
# The manual does not explain the meaning of these flags either, but some can be
# guessed by comparing with the names mentioned in the DCM section of the Xilinx
# Virtex II Pro manual (available from
# https://www.xilinx.com/support/documentation/user_guides/ug012.pdf).
# The event clock register provides the following bits related to DCMs:
# Bit 1:  EVDCM  RES
# Bit 2:  EVDCM  SRES
# Bit 3:  EVDCM  SRUN
# Bit 4:  EVDCM  PSINC
# Bit 5:  EVDCM  PSDEC
# Bit 6:  RECDCM RES
# Bit 7:  RECDCM PSINC
# Bit 8:  RECDCM PSDEC
# Bit 10: EVDCM  PSDONE
# Bit 11: EVDCM  LOCKED
# Bit 12: EVDCM  STOPPED
# Bit 13: RECDCM PSDONE
# Bit 14: RECDCM INITDONE
# Bit 15: RECDCM RUN
# It is assumed that the RECDCM refers to the clock recovered from the signal
# received over the SFP connector and the EVDCM refers to the event clock.
# For some of the bits there meaning or even whether they are inputs or outputs
# is unclear. They are still provided "as-is" because they might be useful to
# an advanced expert user.

record(mbbiDirect, "$(P)$(R)Intrnl:EvClockStatus") {
  field(DTYP, "MRF Memory")
  field(INP,  "@$(DEVICE) 0x0050 uint32")
  field(SCAN, "1 second")
  field(FLNK, "$(P)$(R)EventClock:EvDCM:RESFlag")
}

record(bi, "$(P)$(R)EventClock:EvDCM:RESFlag") {
  field(DESC, "Event DCM RES flag")
  field(INP,  "$(P)$(R)Intrnl:EvClockStatus.B1 NPP MS")
  field(FLNK, "$(P)$(R)EventClock:EvDCM:SRESFlag")
  field(ZNAM, "Low")
  field(ONAM, "High")
}

record(bi, "$(P)$(R)EventClock:EvDCM:SRESFlag") {
  field(DESC, "Event DCM SRES flag")
  field(INP,  "$(P)$(R)Intrnl:EvClockStatus.B2 NPP MS")
  field(FLNK, "$(P)$(R)EventClock:EvDCM:SRUNFlag")
  field(ZNAM, "Low")
  field(ONAM, "High")
}

record(bi, "$(P)$(R)EventClock:EvDCM:SRUNFlag") {
  field(DESC, "Event DCM SRUN flag")
  field(INP,  "$(P)$(R)Intrnl:EvClockStatus.B3 NPP MS")
  field(FLNK, "$(P)$(R)EventClock:EvDCM:PSInc")
  field(ZNAM, "Low")
  field(ONAM, "High")
}

record(bi, "$(P)$(R)EventClock:EvDCM:PSInc") {
  field(DESC, "Event DCM phase shift increment")
  field(INP,  "$(P)$(R)Intrnl:EvClockStatus.B4 NPP MS")
  field(FLNK, "$(P)$(R)EventClock:EvDCM:PSDec")
  field(ZNAM, "Low")
  field(ONAM, "High")
}

record(bi, "$(P)$(R)EventClock:EvDCM:PSDec") {
  field(DESC, "Event DCM phase shift decrement")
  field(INP,  "$(P)$(R)Intrnl:EvClockStatus.B5 NPP MS")
  field(FLNK, "$(P)$(R)EventClock:RecDCM:RESFlag")
  field(ZNAM, "Low")
  field(ONAM, "High")
}

record(bi, "$(P)$(R)EventClock:RecDCM:RESFlag") {
  field(DESC, "Recover DCM RES flag")
  field(INP,  "$(P)$(R)Intrnl:EvClockStatus.B6 NPP MS")
  field(FLNK, "$(P)$(R)EventClock:RecDCM:PSInc")
  field(ZNAM, "Low")
  field(ONAM, "High")
}

record(bi, "$(P)$(R)EventClock:RecDCM:PSInc") {
  field(DESC, "Recover DCM phase shift increment")
  field(INP,  "$(P)$(R)Intrnl:EvClockStatus.B7 NPP MS")
  field(FLNK, "$(P)$(R)EventClock:RecDCM:PSDec")
  field(ZNAM, "Low")
  field(ONAM, "High")
}

record(bi, "$(P)$(R)EventClock:RecDCM:PSDec") {
  field(DESC, "Reciver DCM phase shift decrement")
  field(INP,  "$(P)$(R)Intrnl:EvClockStatus.B8 NPP MS")
  field(FLNK, "$(P)$(R)EventClock:EvDCM:PSDone")
  field(ZNAM, "Low")
  field(ONAM, "High")
}

record(bi, "$(P)$(R)EventClock:EvDCM:PSDone") {
  field(DESC, "Event DCM phase shift done")
  field(INP,  "$(P)$(R)Intrnl:EvClockStatus.BA NPP MS")
  field(FLNK, "$(P)$(R)EventClock:EvDCM:Locked")
  field(ZNAM, "Low")
  field(ONAM, "High")
}

record(bi, "$(P)$(R)EventClock:EvDCM:Locked") {
  field(DESC, "Event DCM locked")
  field(INP,  "$(P)$(R)Intrnl:EvClockStatus.BB NPP MS")
  field(FLNK, "$(P)$(R)EventClock:EvDCM:Stopped")
  field(ZNAM, "Low")
  field(ONAM, "High")
}

record(bi, "$(P)$(R)EventClock:EvDCM:Stopped") {
  field(DESC, "Event DCM stopped")
  field(INP,  "$(P)$(R)Intrnl:EvClockStatus.BC NPP MS")
  field(FLNK, "$(P)$(R)EventClock:RecDCM:PSDone")
  field(ZNAM, "Low")
  field(ONAM, "High")
}

record(bi, "$(P)$(R)EventClock:RecDCM:PSDone") {
  field(DESC, "Recover DCM phase shift done")
  field(INP,  "$(P)$(R)Intrnl:EvClockStatus.BD NPP MS")
  field(FLNK, "$(P)$(R)EventClock:RecDCM:InitDone")
  field(ZNAM, "Low")
  field(ONAM, "High")
}

record(bi, "$(P)$(R)EventClock:RecDCM:InitDone") {
  field(DESC, "Recover DCM initialization done")
  field(INP,  "$(P)$(R)Intrnl:EvClockStatus.BE NPP MS")
  field(FLNK, "$(P)$(R)EventClock:RecDCM:RUNFlag")
  field(ZNAM, "Low")
  field(ONAM, "High")
}

record(bi, "$(P)$(R)EventClock:RecDCM:RUNFlag") {
  field(DESC, "Recover DCM RUN flag")
  field(INP,  "$(P)$(R)Intrnl:EvClockStatus.BF NPP MS")
  field(ZNAM, "Low")
  field(ONAM, "High")
}

# Write all settings in this file to the hardware.

record(fanout, "$(P)$(R)Intrnl:WriteAll:VME") {
}
