# Event clock control register.

# The generic parts of this register are handled by the common file. The DCM
# flags, however, might only exist on certain hardware revisions. The EVR manual
# is not very elaborate regarding this question, but it mentions these flags not
# being available on the cPCI EVR, so it is possible they are missing on other
# hardware revisions, too.
# The manual does not explain the meaning of these flags either, but some can be
# guessed by comparing with the names mentioned in the DCM section of the Xilinx
# Virtex II Pro manual (available from
# https://www.xilinx.com/support/documentation/user_guides/ug012.pdf).
# The event clock register provides the following bits related to DCMs:
# Bit 1:  EVDCM  RES
# Bit 2:  EVDCM  SRES
# Bit 3:  EVDCM  SRUN
# Bit 4:  EVDCM  PSINC
# Bit 5:  EVDCM  PSDEC
# Bit 6:  RECDCM RES
# Bit 7:  RECDCM PSINC
# Bit 8:  RECDCM PSDEC
# Bit 10: EVDCM  PSDONE
# Bit 11: EVDCM  LOCKED
# Bit 12: EVDCM  STOPPED
# Bit 13: RECDCM PSDONE
# Bit 14: RECDCM INITDONE
# Bit 15: RECDCM RUN
# It is assumed that the RECDCM refers to the clock recovered from the signal
# received over the SFP connector and the EVDCM refers to the event clock.
# For some of the bits there meaning or even whether they are inputs or outputs
# is unclear. They are still provided "as-is" because they might be useful to
# an advanced expert user.

record(mbbiDirect, "$(P)$(R)Intrnl:EvClockStatus") {
  field(DTYP, "MRF Memory")
  field(INP,  "@$(DEVICE) 0x0050 uint32")
  field(SCAN, "1 second")
  field(FLNK, "$(P)$(R)EventClock:EvDCM:RESFlag")
}

record(bi, "$(P)$(R)EventClock:EvDCM:RESFlag") {
  field(DESC, "Event DCM RES flag")
  field(INP,  "$(P)$(R)Intrnl:EvClockStatus.B1 NPP MS")
  field(FLNK, "$(P)$(R)EventClock:EvDCM:SRESFlag")
  field(ZNAM, "Low")
  field(ONAM, "High")
}

record(bi, "$(P)$(R)EventClock:EvDCM:SRESFlag") {
  field(DESC, "Event DCM SRES flag")
  field(INP,  "$(P)$(R)Intrnl:EvClockStatus.B2 NPP MS")
  field(FLNK, "$(P)$(R)EventClock:EvDCM:SRUNFlag")
  field(ZNAM, "Low")
  field(ONAM, "High")
}

record(bi, "$(P)$(R)EventClock:EvDCM:SRUNFlag") {
  field(DESC, "Event DCM SRUN flag")
  field(INP,  "$(P)$(R)Intrnl:EvClockStatus.B3 NPP MS")
  field(FLNK, "$(P)$(R)EventClock:EvDCM:PSInc")
  field(ZNAM, "Low")
  field(ONAM, "High")
}

record(bi, "$(P)$(R)EventClock:EvDCM:PSInc") {
  field(DESC, "Event DCM phase shift increment")
  field(INP,  "$(P)$(R)Intrnl:EvClockStatus.B4 NPP MS")
  field(FLNK, "$(P)$(R)EventClock:EvDCM:PSDec")
  field(ZNAM, "Low")
  field(ONAM, "High")
}

record(bi, "$(P)$(R)EventClock:EvDCM:PSDec") {
  field(DESC, "Event DCM phase shift decrement")
  field(INP,  "$(P)$(R)Intrnl:EvClockStatus.B5 NPP MS")
  field(FLNK, "$(P)$(R)EventClock:RecDCM:RESFlag")
  field(ZNAM, "Low")
  field(ONAM, "High")
}

record(bi, "$(P)$(R)EventClock:RecDCM:RESFlag") {
  field(DESC, "Recover DCM RES flag")
  field(INP,  "$(P)$(R)Intrnl:EvClockStatus.B6 NPP MS")
  field(FLNK, "$(P)$(R)EventClock:RecDCM:PSInc")
  field(ZNAM, "Low")
  field(ONAM, "High")
}

record(bi, "$(P)$(R)EventClock:RecDCM:PSInc") {
  field(DESC, "Recover DCM phase shift increment")
  field(INP,  "$(P)$(R)Intrnl:EvClockStatus.B7 NPP MS")
  field(FLNK, "$(P)$(R)EventClock:RecDCM:PSDec")
  field(ZNAM, "Low")
  field(ONAM, "High")
}

record(bi, "$(P)$(R)EventClock:RecDCM:PSDec") {
  field(DESC, "Reciver DCM phase shift decrement")
  field(INP,  "$(P)$(R)Intrnl:EvClockStatus.B8 NPP MS")
  field(FLNK, "$(P)$(R)EventClock:EvDCM:PSDone")
  field(ZNAM, "Low")
  field(ONAM, "High")
}

record(bi, "$(P)$(R)EventClock:EvDCM:PSDone") {
  field(DESC, "Event DCM phase shift done")
  field(INP,  "$(P)$(R)Intrnl:EvClockStatus.BA NPP MS")
  field(FLNK, "$(P)$(R)EventClock:EvDCM:Locked")
  field(ZNAM, "Low")
  field(ONAM, "High")
}

record(bi, "$(P)$(R)EventClock:EvDCM:Locked") {
  field(DESC, "Event DCM locked")
  field(INP,  "$(P)$(R)Intrnl:EvClockStatus.BB NPP MS")
  field(FLNK, "$(P)$(R)EventClock:EvDCM:Stopped")
  field(ZNAM, "Low")
  field(ONAM, "High")
}

record(bi, "$(P)$(R)EventClock:EvDCM:Stopped") {
  field(DESC, "Event DCM stopped")
  field(INP,  "$(P)$(R)Intrnl:EvClockStatus.BC NPP MS")
  field(FLNK, "$(P)$(R)EventClock:RecDCM:PSDone")
  field(ZNAM, "Low")
  field(ONAM, "High")
}

record(bi, "$(P)$(R)EventClock:RecDCM:PSDone") {
  field(DESC, "Recover DCM phase shift done")
  field(INP,  "$(P)$(R)Intrnl:EvClockStatus.BD NPP MS")
  field(FLNK, "$(P)$(R)EventClock:RecDCM:InitDone")
  field(ZNAM, "Low")
  field(ONAM, "High")
}

record(bi, "$(P)$(R)EventClock:RecDCM:InitDone") {
  field(DESC, "Recover DCM initialization done")
  field(INP,  "$(P)$(R)Intrnl:EvClockStatus.BE NPP MS")
  field(FLNK, "$(P)$(R)EventClock:RecDCM:RUNFlag")
  field(ZNAM, "Low")
  field(ONAM, "High")
}

record(bi, "$(P)$(R)EventClock:RecDCM:RUNFlag") {
  field(DESC, "Recover DCM RUN flag")
  field(INP,  "$(P)$(R)Intrnl:EvClockStatus.BF NPP MS")
  field(ZNAM, "Low")
  field(ONAM, "High")
}

# Front panel universal I/O GPIO signal direction.
# Front panel universal I/O GPIO input register.
# Front panel universal I/O GPIO output register.

# We do not use these registers directly. Instead, we use them for providing
# access to the fine delay of the universal I/O modules, if a module supporting
# the fine delay is installed.

record(bi, "$(P)$(R)UnivOut0:FineDelayAvailable") {
  field(DESC, "Univ. outp. mod. 0/1 fine delay avail.?")
  field(PINI, "YES")
  field(VAL,  "$(UNIV_OUT_0_1_FD_AVAILABLE=$(UNIV_OUT_FD_AVAILABLE=0))")
  field(ZNAM, "Not available")
  field(ONAM, "Available")
}

record(bi, "$(P)$(R)UnivOut1:FineDelayAvailable") {
  field(DESC, "Univ. outp. mod. 0/1 fine delay avail.?")
  field(PINI, "YES")
  field(VAL,  "$(UNIV_OUT_0_1_FD_AVAILABLE=$(UNIV_OUT_FD_AVAILABLE=0))")
  field(ZNAM, "Not available")
  field(ONAM, "Available")
}

record(ao, "$(P)$(R)UnivOut0:FineDelay") {
  field(DESC, "Univ. output 0 fine delay")
  field(DTYP, "Raw Soft Channel")
  field(LINR, "SLOPE")
  field(EOFF, "0")
  field(ESLO, "10")
  field(EGU,  "ps")
  field(FLNK, "$(P)$(R)Intrnl:UnivOut01:FineDelay:Calc")
# TODO This makes the alarm severity propagate back but it also causes undesired
# processing of the record (in particular on startup). Therefore, we do not use
# it at the moment which means that an output error will not turn up on the
# record seen by the user.
#  field(SDIS, "$(P)$(R)Intrnl:UnivOut01:FineDelay:Raw.SEVR CP MSS")
#  field(DISV, "999")
}

record(ao, "$(P)$(R)UnivOut1:FineDelay") {
  field(DESC, "Univ. output 1 fine delay")
  field(DTYP, "Raw Soft Channel")
  field(LINR, "SLOPE")
  field(EOFF, "0")
  field(ESLO, "10")
  field(EGU,  "ps")
  field(FLNK, "$(P)$(R)Intrnl:UnivOut01:FineDelay:Calc")
# TODO This makes the alarm severity propagate back but it also causes undesired
# processing of the record (in particular on startup). Therefore, we do not use
# it at the moment which means that an output error will not turn up on the
# record seen by the user.
#  field(SDIS, "$(P)$(R)Intrnl:UnivOut01:FineDelay:Raw.SEVR CP MSS")
#  field(DISV, "999")
}

record(calc, "$(P)$(R)Intrnl:UnivOut01:FineDelay:Calc") {
  field(CALC, "(A&1023)|((B&1023)<<16)")
  field(INPA, "$(P)$(R)UnivOut0:FineDelay.RVAL")
  field(INPB, "$(P)$(R)UnivOut1:FineDelay.RVAL")
  field(FLNK,  "$(P)$(R)Intrnl:UnivOut01:FineDelay:Raw")
}

record(longout, "$(P)$(R)Intrnl:UnivOut01:FineDelay:Raw") {
  field(DTYP, "MRF Fine Delay Shift Register")
  field(OUT,  "@$(DEVICE) 0x090[0] 0x098[0]")
  field(OMSL, "closed_loop")
  field(DOL,  "$(P)$(R)Intrnl:UnivOut01:FineDelay:Calc NPP")
}

record(bi, "$(P)$(R)UnivOut2:FineDelayAvailable") {
  field(DESC, "Univ. outp. mod. 2/3 fine delay avail.?")
  field(PINI, "YES")
  field(VAL,  "$(UNIV_OUT_2_3_FD_AVAILABLE=$(UNIV_OUT_FD_AVAILABLE=0))")
  field(ZNAM, "Not available")
  field(ONAM, "Available")
}

record(bi, "$(P)$(R)UnivOut3:FineDelayAvailable") {
  field(DESC, "Univ. outp. mod. 2/3 fine delay avail.?")
  field(PINI, "YES")
  field(VAL,  "$(UNIV_OUT_2_3_FD_AVAILABLE=$(UNIV_OUT_FD_AVAILABLE=0))")
  field(ZNAM, "Not available")
  field(ONAM, "Available")
}

record(ao, "$(P)$(R)UnivOut2:FineDelay") {
  field(DESC, "Univ. output 2 fine delay")
  field(DTYP, "Raw Soft Channel")
  field(LINR, "SLOPE")
  field(EOFF, "0")
  field(ESLO, "10")
  field(EGU,  "ps")
  field(FLNK, "$(P)$(R)Intrnl:UnivOut23:FineDelay:Calc")
# TODO This makes the alarm severity propagate back but it also causes undesired
# processing of the record (in particular on startup). Therefore, we do not use
# it at the moment which means that an output error will not turn up on the
# record seen by the user.
#  field(SDIS, "$(P)$(R)Intrnl:UnivOut23:FineDelay:Raw.SEVR CP MSS")
#  field(DISV, "999")
}

record(ao, "$(P)$(R)UnivOut3:FineDelay") {
  field(DESC, "Univ. output 3 fine delay")
  field(DTYP, "Raw Soft Channel")
  field(LINR, "SLOPE")
  field(EOFF, "0")
  field(ESLO, "10")
  field(EGU,  "ps")
  field(FLNK, "$(P)$(R)Intrnl:UnivOut23:FineDelay:Calc")
# TODO This makes the alarm severity propagate back but it also causes undesired
# processing of the record (in particular on startup). Therefore, we do not use
# it at the moment which means that an output error will not turn up on the
# record seen by the user.
#  field(SDIS, "$(P)$(R)Intrnl:UnivOut23:FineDelay:Raw.SEVR CP MSS")
#  field(DISV, "999")
}

record(calc, "$(P)$(R)Intrnl:UnivOut23:FineDelay:Calc") {
  field(CALC, "(A&1023)|((B&1023)<<16)")
  field(INPA, "$(P)$(R)UnivOut2:FineDelay.RVAL")
  field(INPB, "$(P)$(R)UnivOut3:FineDelay.RVAL")
  field(FLNK,  "$(P)$(R)Intrnl:UnivOut23:FineDelay:Raw")
}

record(longout, "$(P)$(R)Intrnl:UnivOut23:FineDelay:Raw") {
  field(DTYP, "MRF Fine Delay Shift Register")
  field(OUT,  "@$(DEVICE) 0x090[4] 0x098[4]")
  field(OMSL, "closed_loop")
  field(DOL,  "$(P)$(R)Intrnl:UnivOut23:FineDelay:Calc NPP")
}

