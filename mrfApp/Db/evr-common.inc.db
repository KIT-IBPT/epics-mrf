# Internal general purpose records.

record(bi, "$(P)$(R)Intrnl:True") {
  field(PINI, "YES")
  field(VAL,  "1")
}

record(bi, "$(P)$(R)Intrnl:False") {
  field(PINI, "YES")
  field(VAL,  "0")
}

# Write all records (that are part of this file) to the hardware.

record(fanout, "$(P)$(R)Intrnl:WriteAll:Common") {
  field(LNK1, "$(P)$(R)DBus:SharedRX")
  field(LNK2, "$(P)$(R)DBus:SharedTX")
  field(LNK3, "$(P)$(R)DataBuffer:TX:Enabled")
  field(LNK4, "$(P)$(R)DataBuffer:TX:TransferSize")
  field(LNK5, "$(P)$(R)DataBuffer:TX:TransmitData:WriteAll")
  field(LNK6, "$(P)$(R)Enabled")
  field(FLNK, "$(P)$(R)Intrnl:WriteAll:Common:Fout1")
}

record(fanout, "$(P)$(R)Intrnl:WriteAll:Common:Fout1") {
  field(LNK1, "$(P)$(R)Event:Log:StopEventEnabled")
  field(LNK2, "$(P)$(R)Event:MapRAM:Enabled")
  field(LNK3, "$(P)$(R)Event:MapRAM:Select")
  field(LNK4, "$(P)$(R)EventClock:Freq")
  field(LNK5, "$(P)$(R)EventClock:Gen:Freq")
  field(LNK6, "$(P)$(R)RX:Loopback")
  field(FLNK, "$(P)$(R)Intrnl:WriteAll:Common:Fout2")
}

record(fanout, "$(P)$(R)Intrnl:WriteAll:Common:Fout2") {
  field(LNK1, "$(P)$(R)TX:Loopback")
  field(LNK2, "$(P)$(R)TimeStamp:EventCounterPrescaler")
  field(LNK3, "$(P)$(R)TimeStamp:EventCounterSource")
}

# Status register.

# We use a separate record for the distributed bus status, so that it can be
# updated explicitly. This is a bit less efficient than reading the status once,
# but allows more explicit control.
record(mbbiDirect, "$(P)$(R)DBus:Status") {
  field(DESC, "Distributed bus bits")
  field(DTYP, "MRF Memory")
  field(INP,  "@$(DEVICE) 0x0000[31:24] uint32")
  field(FLNK, "$(P)$(R)DBus:B7:RX:Status")
}

record(bi, "$(P)$(R)DBus:B7:RX:Status") {
  field(DESC, "Distributed bus RX bit 7")
  field(INP,  "$(P)$(R)DBus:Status.B7 MSS")
  field(FLNK, "$(P)$(R)DBus:B6:RX:Status")
  field(ZNAM, "Not set")
  field(ONAM, "Set")
}

record(bi, "$(P)$(R)DBus:B6:RX:Status") {
  field(DESC, "Distributed bus RX bit 6")
  field(INP,  "$(P)$(R)DBus:Status.B6 MSS")
  field(FLNK, "$(P)$(R)DBus:B5:RX:Status")
  field(ZNAM, "Not set")
  field(ONAM, "Set")
}

record(bi, "$(P)$(R)DBus:B5:RX:Status") {
  field(DESC, "Distributed bus RX bit 5")
  field(INP,  "$(P)$(R)DBus:Status.B5 MSS")
  field(FLNK, "$(P)$(R)DBus:B4:RX:Status")
  field(ZNAM, "Not set")
  field(ONAM, "Set")
}

record(bi, "$(P)$(R)DBus:B4:RX:Status") {
  field(DESC, "Distributed bus RX bit 4")
  field(INP,  "$(P)$(R)DBus:Status.B4 MSS")
  field(FLNK, "$(P)$(R)DBus:B3:RX:Status")
  field(ZNAM, "Not set")
  field(ONAM, "Set")
}

record(bi, "$(P)$(R)DBus:B3:RX:Status") {
  field(DESC, "Distributed bus RX bit 3")
  field(INP,  "$(P)$(R)DBus:Status.B3 MSS")
  field(FLNK, "$(P)$(R)DBus:B2:RX:Status")
  field(ZNAM, "Not set")
  field(ONAM, "Set")
}

record(bi, "$(P)$(R)DBus:B2:RX:Status") {
  field(DESC, "Distributed bus RX bit 2")
  field(INP,  "$(P)$(R)DBus:Status.B2 MSS")
  field(FLNK, "$(P)$(R)DBus:B1:RX:Status")
  field(ZNAM, "Not set")
  field(ONAM, "Set")
}

record(bi, "$(P)$(R)DBus:B1:RX:Status") {
  field(DESC, "Distributed bus RX bit 1")
  field(INP,  "$(P)$(R)DBus:Status.B1 MSS")
  field(FLNK, "$(P)$(R)DBus:B0:RX:Status")
  field(ZNAM, "Not set")
  field(ONAM, "Set")
}

record(bi, "$(P)$(R)DBus:B0:RX:Status") {
  field(DESC, "Distributed bus RX bit 0")
  field(INP,  "$(P)$(R)DBus:Status.B0 MSS")
  field(ZNAM, "Not set")
  field(ONAM, "Set")
}

record(mbbiDirect, "$(P)$(R)Intrnl:Status") {
  field(DTYP, "MRF Memory")
  field(INP,  "@$(DEVICE) 0x0000[7:0] uint32")
  field(FLNK, "$(P)$(R)SFP:Missing")
  field(SCAN, "1 second")
}

record(bi, "$(P)$(R)SFP:Missing") {
  field(DESC, "SFP module missing?")
  field(INP,  "$(P)$(R)Intrnl:Status.B7 MSS")
  field(FLNK, "$(P)$(R)SFP:Link")
  field(ZNAM, "Installed")
  field(ONAM, "Missing")
}

record(bi, "$(P)$(R)SFP:Link") {
  field(DESC, "SFP link up?")
  field(INP,  "$(P)$(R)Intrnl:Status.B6 MSS")
  field(FLNK, "$(P)$(R)RX:EventFIFOStopped")
  field(ZNAM, "Link down")
  field(ONAM, "Link up")
}

record(bi, "$(P)$(R)RX:EventFIFOStopped") {
  field(DESC, "Event FIFO stopped?")
  field(INP,  "$(P)$(R)Intrnl:Status.B5 MSS")
  field(ZNAM, "Running")
  field(ONAM, "Stopped")
}

# Control register.

record(bo, "$(P)$(R)Enabled") {
  field(DESC, "Enable EVR?")
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x0004[31] uint32")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
}

record(bo, "$(P)$(R)RX:Loopback") {
  field(DESC, "Loopback TX to RX?")
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x0004[29] uint32")
  field(ZNAM, "Regular RX")
  field(ONAM, "Loopback TX")
}

record(bo, "$(P)$(R)TX:Loopback") {
  field(DESC, "Loopback RX to TX?")
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x0004[28] uint32")
  field(ZNAM, "Regular TX")
  field(ONAM, "Loopback RX")
}

record(bo, "$(P)$(R)Cmd:Reset") {
  field(DESC, "Soft Reset IP")
  field(ZNAM, "Reset")
  field(ONAM, "Reset")
  field(FLNK, "$(P)$(R)Intrnl:Cmd:Reset")
}

record(bo, "$(P)$(R)Intrnl:Cmd:Reset") {
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x0004[26] uint32 no_verify")
  field(OMSL, "closed_loop")
  field(DOL,  "$(P)$(R)Intrnl:True")
  field(ZNAM, "Reset")
  field(ONAM, "No Reset")
}

record(bo, "$(P)$(R)TimeStamp:EventCounterSource") {
  field(DESC, "Event counter clock source")
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x0004[14] uint32")
  field(ZNAM, "D. bus bit 4")
  field(ONAM, "Event code 7C")
}

record(bo, "$(P)$(R)TimeStamp:Reset") {
  field(DESC, "Reset TS event counter and TS latch")
  field(ZNAM, "Reset")
  field(ONAM, "Reset")
  field(FLNK, "$(P)$(R)Intrnl:TimeStamp:Reset")
}

record(bo, "$(P)$(R)Intrnl:TimeStamp:Reset") {
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x0004[13] uint32 no_verify")
  field(OMSL, "closed_loop")
  field(DOL,  "$(P)$(R)Intrnl:True")
  field(ZNAM, "Reset")
  field(ONAM, "No reset")
}

record(bo, "$(P)$(R)TimeStamp:Latch") {
  field(DESC, "Latch TS event counter to TS latch")
  field(ZNAM, "Latch")
  field(ONAM, "Latch")
  field(FLNK, "$(P)$(R)Intrnl:TimeStamp:Latch")
}

record(bo, "$(P)$(R)Intrnl:TimeStamp:Latch") {
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x0004[10] uint32 no_verify")
  field(OMSL, "closed_loop")
  field(DOL,  "$(P)$(R)Intrnl:True")
  field(ZNAM, "Latch")
  field(ONAM, "No latch")
}

record(bo, "$(P)$(R)Event:MapRAM:Enabled") {
  field(DESC, "Enable mapping RAM?")
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x0004[9] uint32")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
}

record(bo, "$(P)$(R)Event:MapRAM:Select") {
  field(DESC, "Select mapping RAM")
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x0004[8] uint32")
  field(ZNAM, "Map. RAM 0")
  field(ONAM, "Map. RAM 1")
}

record(bo, "$(P)$(R)Event:Log:Reset") {
  field(DESC, "Reset event log")
  field(ZNAM, "Reset")
  field(ONAM, "Reset")
  field(FLNK, "$(P)$(R)Intrnl:Event:Log:Reset")
}

record(bo, "$(P)$(R)Intrnl:Event:Log:Reset") {
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x0004[7] uint32 no_verify")
  field(OMSL, "closed_loop")
  field(DOL,  "$(P)$(R)Intrnl:True")
  field(ZNAM, "Reset")
  field(ONAM, "No reset")
}

record(bo, "$(P)$(R)Event:Log:Enable") {
  field(DESC, "Enable event log")
  field(ZNAM, "Enable")
  field(ONAM, "Enable")
  field(FLNK, "$(P)$(R)Intrnl:Event:Log:Enable")
}

record(bo, "$(P)$(R)Intrnl:Event:Log:Enable") {
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x0004[6] uint32 no_verify")
  field(OMSL, "closed_loop")
  field(DOL,  "$(P)$(R)Intrnl:True")
  field(ZNAM, "Enable")
  field(ONAM, "No enable")
}

record(bo, "$(P)$(R)Event:Log:Disable") {
  field(DESC, "Disable event log")
  field(ZNAM, "Disable")
  field(ONAM, "Disable")
  field(FLNK, "$(P)$(R)Intrnl:Event:Log:Disable")
}

record(bo, "$(P)$(R)Intrnl:Event:Log:Disable") {
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x0004[5] uint32 no_verify")
  field(OMSL, "closed_loop")
  field(DOL,  "$(P)$(R)Intrnl:True")
  field(ZNAM, "Disable")
  field(ONAM, "No disable")
}

record(bo, "$(P)$(R)Event:Log:StopEventEnabled") {
  field(DESC, "Enable event log stop event?")
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x0004[4] uint32")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
}

record(bo, "$(P)$(R)RX:ResetEventFIFO") {
  field(DESC, "Reset RX Event FIFO")
  field(ZNAM, "Reset")
  field(ONAM, "Reset")
  field(FLNK, "$(P)$(R)Intrnl:RX:ResetEventFIFO")
}

record(bo, "$(P)$(R)Intrnl:RX:ResetEventFIFO") {
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x0004[3] uint32 no_verify")
  field(OMSL, "closed_loop")
  field(DOL,  "$(P)$(R)Intrnl:True")
  field(ZNAM, "Reset")
  field(ONAM, "No Reset")
}

# Receive data buffer control and status register.

# Polling the reception running flag with a fixed rate does not make sense.
# An application, that wants to send data should instead trigger processing of
# this record and wait until its value becomes one or zero (depending on the
# application).
record(bi, "$(P)$(R)DataBuffer:RX:Running") {
  field(DESC, "Data buffer reception running?")
  field(DTYP, "MRF Memory")
  field(INP,  "@$(DEVICE) 0x0020[15] uint32")
  field(ZNAM, "Not running")
  field(ONAM, "Running")
}

# Polling the reception complete flag with a fixed rate does not make sense.
# An application, that wants to send data should instead trigger processing of
# this record and wait until its value becomes one or zero (depending on the
# application).
record(bi, "$(P)$(R)DataBuffer:RX:Complete") {
  field(DESC, "Data buffer reception complete?")
  field(DTYP, "MRF Memory")
  field(INP,  "@$(DEVICE) 0x0020[14] uint32")
  field(ZNAM, "Not complete")
  field(ONAM, "Complete")
}

record(bo, "$(P)$(R)DataBuffer:RX:Enable") {
  field(DESC, "Enable (single) reception")
  field(ZNAM, "Enable")
  field(ONAM, "Enable")
  field(FLNK, "$(P)$(R)Intrnl:DataBuffer:RX:Enable")
}

record(bo, "$(P)$(R)Intrnl:DataBuffer:RX:Enable") {
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x0020[15] uint32 no_verify")
  field(OMSL, "closed_loop")
  field(DOL,  "$(P)$(R)Intrnl:True")
  field(ZNAM, "Enable")
  field(ONAM, "No enable")
}

record(bo, "$(P)$(R)DataBuffer:RX:Disable") {
  field(DESC, "Disable running reception")
  field(ZNAM, "Disable")
  field(ONAM, "Disable")
  field(FLNK, "$(P)$(R)Intrnl:DataBuffer:RX:Disable")
}

record(bo, "$(P)$(R)Intrnl:DataBuffer:RX:Disable") {
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x0020[14] uint32 no_verify")
  field(OMSL, "closed_loop")
  field(DOL,  "$(P)$(R)Intrnl:True")
  field(ZNAM, "Disable")
  field(ONAM, "No disable")
}

# Polling the checksum error flag with a fixed rate does not make sense.
# An application should trigger processing when needed.
record(bi, "$(P)$(R)DataBuffer:RX:ChecksumError") {
  field(DESC, "Data buffer reception checksum error?")
  field(DTYP, "MRF Memory")
  field(INP,  "@$(DEVICE) 0x0020[13] uint32")
  field(ZNAM, "OK")
  field(ONAM, "Error")
}

record(bo, "$(P)$(R)DBus:SharedRX") {
  field(DESC, "Share dist. bus with data buffer RX?")
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x0020[12] uint32")
  field(ZNAM, "Not shared")
  field(ONAM, "Shared")
}

# Polling the received data size register with a fixed rate does not make sense.
# An application should trigger processing when needed.
record(ai, "$(P)$(R)DataBuffer:RX:ReceivedSize") {
  field(DESC, "Data buffer received size")
  field(DTYP, "MRF Memory")
  field(INP,  "@$(DEVICE) 0x0020[11:0] uint32")
  field(LINR, "SLOPE")
  field(EOFF, "4")
  field(ESLO, "4")
  field(LOPR, "4")
  field(HOPR, "2048")
  field(EGU,  "bytes")
}

# Transmit data buffer control and status register.

# Polling the transmission complete flag with a fixed rate does not make sense.
# An application, that wants to send data should instead trigger processing of
# this record and wait until its value becomes zero.
record(bi, "$(P)$(R)DataBuffer:TX:Complete") {
  field(DESC, "Data buffer transmission complete?")
  field(DTYP, "MRF Memory")
  field(INP,  "@$(DEVICE) 0x0024[20] uint32")
  field(ZNAM, "Not complete")
  field(ONAM, "Complete")
}

# Polling the transmission running flag with a fixed rate does not make sense.
# An application, that wants to send data should instead trigger processing of
# this record and wait until its value becomes one or zero (depending on the
# application).
record(bi, "$(P)$(R)DataBuffer:TX:Running") {
  field(DESC, "Data buffer transmission running?")
  field(DTYP, "MRF Memory")
  field(INP,  "@$(DEVICE) 0x0024[19] uint32")
  field(ZNAM, "Not running")
  field(ONAM, "Running")
}

record(bo, "$(P)$(R)DataBuffer:TX:Transmit") {
  field(DESC, "Start data buffer transmission")
  field(FLNK, "$(P)$(R)Intrnl:DataBuffer:TX:Transmit")
  field(ZNAM, "Transmit")
  field(ONAM, "Transmit")
}

record(bo, "$(P)$(R)Intrnl:DataBuffer:TX:Transmit") {
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x0024[18] uint32 no_verify")
  field(OMSL, "closed_loop")
  field(DOL,  "$(P)$(R)Intrnl:True")
  field(ZNAM, "No transmit")
  field(ONAM, "Transmit")
}

record(bo, "$(P)$(R)DataBuffer:TX:Enabled") {
  field(DESC, "Enable data buffer TX engine?")
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x0024[17] uint32")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
}

record(bo, "$(P)$(R)DBus:SharedTX") {
  field(DESC, "Share dist. bus with data buffer TX?")
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x0024[16] uint32")
  field(ZNAM, "Not shared")
  field(ONAM, "Shared")
}

record(ao, "$(P)$(R)DataBuffer:TX:TransferSize") {
  field(DESC, "Data buffer transfer size")
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x0024[10:2] uint32")
  field(LINR, "SLOPE")
  field(EOFF, "4")
  field(ESLO, "4")
  field(DRVL, "4")
  field(DRVH, "2048")
  field(LOPR, "4")
  field(HOPR, "2048")
  field(EGU,  "bytes")
}

# FPGA firmware version register.

record(longin, "$(P)$(R)Firmware:Version:Complete") {
  field(DESC, "Complete FPGA firmware version number")
  field(DTYP, "MRF Memory")
  field(INP,  "@$(DEVICE) 0x002c uint32")
  field(PINI, "YES")
}

record(mbbi, "$(P)$(R)Firmware:FormFactor") {
  field(DESC, "FPGA firmware form factor")
  field(DTYP, "MRF Memory")
  field(INP,  "@$(DEVICE) 0x002c[27:24] uint32")
  field(PINI, "YES")
  field(ZRVL, "0")
  field(ZRST, "cPCI 3U")
  field(ONVL, "1")
  field(ONST, "PMC")
  field(TWVL, "2")
  field(TWST, "VME64x")
  field(THVL, "3")
  field(THST, "cRIO")
  field(FRVL, "4")
  field(FRST, "cPCI 6U")
  # Number five is not defined in the EVR manual, but it might in the future, so
  # we rather keep it unused.
  field(SXVL, "6")
  field(SXST, "PXIe")
  field(SVVL, "7")
  field(SVST, "PCIe")
  field(EIVL, "8")
  field(EIST, "mTCA")
}

record(longin, "$(P)$(R)Firmware:SubreleaseID") {
  field(DESC, "FW version subrelease ID")
  field(DTYP, "MRF Memory")
  field(INP,  "@$(DEVICE) 0x002c[23:16] uint32")
  field(PINI, "YES")
}

record(longin, "$(P)$(R)Firmware:FirmwareID") {
  field(DESC, "FW version firmware ID")
  field(DTYP, "MRF Memory")
  field(INP,  "@$(DEVICE) 0x002c[15:8] uint32")
  field(PINI, "YES")
}

record(longin, "$(P)$(R)Firmware:RevisionID") {
  field(DESC, "FW version revision ID")
  field(DTYP, "MRF Memory")
  field(INP,  "@$(DEVICE) 0x002c[7:0] uint32")
  field(FLNK, "$(P)$(R)Firmware:Version")
  field(PINI, "YES")
}

# This is only provided for compatibility with older versions of the device
# support and will be removed in a future version.
record(longin, "$(P)$(R)Firmware:Version") {
  field(DESC, "Firmware version ID")
  field(INP,  "$(P)$(R)Firmware:RevisionID MSS")
}

# Event counter clock prescaler register.

record(longout, "$(P)$(R)TimeStamp:EventCounterPrescaler") {
  field(DESC, "Event counter clock prescaler")
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x0040[15:0] uint32")
  field(DRVL, "0")
  field(DRVH, "65535")
  field(LOPR, "0")
  field(HOPR, "65535")
  field(EGU,  "MHz")
}

# Microseconds divider register.

record(longout, "$(P)$(R)EventClock:Freq") {
  field(DESC, "Event clock frequency")
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x004c[15:0] uint32")
  field(DRVL, "50")
  field(DRVH, "125")
  field(LOPR, "50")
  field(HOPR, "125")
  field(EGU,  "MHz")
}

# Clock control register.

# TODO It is not clear whether this only for the internal clock generation or
# also used when using an external reference clock.
record(bi, "$(P)$(R)EventClock:Gen:Locked") {
  field(DESC, "Micrel SY87739L locked?")
  field(DTYP, "MRF Memory")
  field(INP,  "@$(DEVICE) 0x0050[9] uint32")
  field(SCAN, "1 second")
  field(ZNAM, "Not locked")
  field(ONAM, "Locked")
}

# Seconds shift register.

# Polling the seconds shift register with a fixed rate does not make sense.
# An application should trigger processing when needed.
record(longin, "$(P)$(R)TimeStamp:SecondsShift") {
  field(DESC, "Seconds shift register")
  field(DTYP, "MRF Memory")
  field(INP,  "@$(DEVICE) 0x005c uint32")
}

# Seconds counter register.

# Polling the seconds counter register with a fixed rate does not make sense.
# An application should trigger processing when needed.
record(longin, "$(P)$(R)TimeStamp:SecondsCounter") {
  field(DESC, "Seconds counter register")
  field(DTYP, "MRF Memory")
  field(INP,  "@$(DEVICE) 0x0060 uint32")
}

# Timestamp event counter register.

# Polling the timestamp event counter register with a fixed rate does not make
# sense. An application should trigger processing when needed.
record(longin, "$(P)$(R)TimeStamp:EventCounter") {
  field(DESC, "Event counter register")
  field(DTYP, "MRF Memory")
  field(INP,  "@$(DEVICE) 0x0064 uint32")
}

# Seconds latch register.

# Polling the seconds latch register with a fixed rate does not make sense.
# An application should trigger processing when needed.
record(longin, "$(P)$(R)TimeStamp:SecondsLatch") {
  field(DESC, "Seconds latch register")
  field(DTYP, "MRF Memory")
  field(INP,  "@$(DEVICE) 0x0068 uint32")
}

# Timestamp event latch register.

# Polling the time-stamp event latch register with a fixed rate does not make
# sense. An application should trigger processing when needed.
record(longin, "$(P)$(R)TimeStamp:EventLatch") {
  field(DESC, "Event latch register")
  field(DTYP, "MRF Memory")
  field(INP,  "@$(DEVICE) 0x006c uint32")
}

# FIFO seconds register.

# Polling the FIFO seconds register with a fixed rate does not make sense. An
# application should trigger processing when needed. Only the event code record
# should be processed. It will trigger processing of the other records in the
# right order.
record(longin, "$(P)$(R)Event:FIFO:Seconds") {
  field(DESC, "Event FIFO seconds register")
  field(DTYP, "MRF Memory")
  field(INP,  "@$(DEVICE) 0x0070 uint32")
}

# FIFO timestamp register.

# Polling the FIFO time-stamp register with a fixed rate does not make sense. An
# application should trigger processing when needed. Only the event code record
# should be processed. It will trigger processing of the other records in the
# right order.
record(longin, "$(P)$(R)Event:FIFO:TimeStamp") {
  field(DESC, "Event FIFO seconds register")
  field(DTYP, "MRF Memory")
  field(INP,  "@$(DEVICE) 0x0074 uint32")
  field(FLNK, "$(P)$(R)Event:FIFO:Seconds")
}

# FIFO event register.

# Polling the FIFO event code register with a fixed rate does not make sense. An
# application should trigger processing when needed. Processing this record will
# also trigger processing of the seconds and time-stamp records, because the
# order in which these registers are read matters.
record(longin, "$(P)$(R)Event:FIFO:EventCode") {
  field(DESC, "Event FIFO event code register")
  field(DTYP, "MRF Memory")
  field(INP,  "@$(DEVICE) 0x0078[7:0] uint32")
  field(FLNK, "$(P)$(R)Event:FIFO:TimeStamp")
}

# Event log status register.

# The first bit of this 32-bit register is a flag indicating where the first
# entry of the log can be found. If the flag is zero, the first entry is at
# position zero and the lower nine bits of the register specify the number of
# entries. If the flag is one, the first entry is at the position specified by
# the lower nine bits of the register and the number of entries is 512.
# The entries can be read from the event log register (0x2000). Each log entry
# is 128 bit wide. The first 32 bits are the seconds part of the time stamp.
# The second 32 bits are the event counter part of the time stamp. The third
# 32 bits are the event code (only the lower 8 bits are used). The fourth
# 32 bits are reserved for future use.

record(bo, "$(P)$(R)Event:Log:Update") {
  field(DESC, "Update the event log records")
  field(FLNK, "$(P)$(R)Intrnl:Event:Log:Status")
  field(ZNAM, "Update")
  field(ONAM, "Update")
}

record(longin, "$(P)$(R)Intrnl:Event:Log:Status") {
  field(DTYP, "MRF Memory")
  field(INP,  "@$(DEVICE) 0x007c uint32")
  field(FLNK, "$(P)$(R)Intrnl:Event:Log:Full")
}

record(calc, "$(P)$(R)Intrnl:Event:Log:Full") {
  field(CALC, "(A>>31)&1")
  field(INPA, "$(P)$(R)Intrnl:Event:Log:Status")
  field(FLNK, "$(P)$(R)Intrnl:Event:Log:Offset")
}

record(calc, "$(P)$(R)Intrnl:Event:Log:Offset") {
  field(CALC, "B?(A&511):0")
  field(INPA, "$(P)$(R)Intrnl:Event:Log:Status")
  field(INPB, "$(P)$(R)Intrnl:Event:Log:Full")
  field(FLNK, "$(P)$(R)Intrnl:Event:Log:Size")
}

record(calc, "$(P)$(R)Intrnl:Event:Log:Size") {
  field(CALC, "B?512:(A&511)")
  field(INPA, "$(P)$(R)Intrnl:Event:Log:Status")
  field(INPB, "$(P)$(R)Intrnl:Event:Log:Full")
  field(FLNK, "$(P)$(R)Event:Log:Seconds")
}

record(longin, "$(P)$(R)Event:Log:Offset") {
  field(DESC, "Offset into the event log array")
  field(INP,  "$(P)$(R)Intrnl:Event:Log:Offset MSS")
  field(FLNK, "$(P)$(R)Event:Log:Size")
}

record(longin, "$(P)$(R)Event:Log:Size") {
  field(DESC, "Num. of valid entries in the event log")
  field(INP,  "$(P)$(R)Intrnl:Event:Log:Size MSS")
}

# SY87739L Fractional divider configuration word.

record(mbbo, "$(P)$(R)EventClock:Gen:Freq") {
  field(DESC, "Int. clock generator freq.")
  field(DTYP, "MRF Memory")
  field(OUT,  "@$(DEVICE) 0x0080 uint32")
  field(ZRVL, "$(CLK_GEN_CW_0=0x00de816d)")
  field(ZRST, "$(CLK_GEN_F_0=125 MHz)")
  field(ONVL, "$(CLK_GEN_CW_1=0x0c928166)")
  field(ONST, "$(CLK_GEN_F_1=124.908 MHz)")
  field(TWVL, "$(CLK_GEN_CW_2=0x018741ad)")
  field(TWST, "$(CLK_GEN_F_2=119 MHz)")
  field(THVL, "$(CLK_GEN_CW_3=0x072f01ad)")
  field(THST, "$(CLK_GEN_F_3=114.24 MHz)")
  field(FRVL, "$(CLK_GEN_CW_4=0x049e81ad)")
  field(FRST, "$(CLK_GEN_F_4=106.25 MHz)")
  field(FVVL, "$(CLK_GEN_CW_5=0x008201ad)")
  field(FVST, "$(CLK_GEN_F_5=100 MHz)")
  field(SXVL, "$(CLK_GEN_CW_6=0x025b41ed)")
  field(SXST, "$(CLK_GEN_F_6=99.956 MHz)")
  field(SVVL, "$(CLK_GEN_CW_7=0x0187422d)")
  field(SVST, "$(CLK_GEN_F_7=89.25 MHz)")
  field(EIVL, "$(CLK_GEN_CW_8=0x0082822d)")
  field(EIST, "$(CLK_GEN_F_8=81 MHz)")
  field(NIVL, "$(CLK_GEN_CW_9=0x0106822d)")
  field(NIST, "$(CLK_GEN_F_9=80 MHz)")
  field(TEVL, "$(CLK_GEN_CW_10=0x019e822d)")
  field(TEST, "$(CLK_GEN_F_10=78.9 MHz)")
  field(ELVL, "$(CLK_GEN_CW_11=0x018742ad)")
  field(ELST, "$(CLK_GEN_F_11=71.4 MHz)")
  field(TVVL, "$(CLK_GEN_CW_12=0x0c9282a6)")
  field(TVST, "$(CLK_GEN_F_12=62.454 MHz)")
  field(TTVL, "$(CLK_GEN_CW_13=0x009743ad)")
  field(TTST, "$(CLK_GEN_F_13=50 MHz)")
  field(FTVL, "$(CLK_GEN_CW_14=0xc25b43ad)")
  field(FTST, "$(CLK_GEN_F_14=49.978 MHz)")
  field(FFVL, "$(CLK_GEN_CW_15=0x0176c36d)")
  field(FFST, "$(CLK_GEN_F_15=49.965 MHz)")
}

# Data buffer receive memory.

# Polling the received data with a fixed rate does not make sense and is
# extremely expensive. An application, that wants to read the received data
# should instead wait for the reception process to finish and than trigger
# processing of this record.
record(waveform, "$(P)$(R)DataBuffer:RX:ReceivedData") {
  field(DESC, "Received data")
  field(DTYP, "MRF Memory Input")
  field(INP,  "@$(DEVICE) 0x0800 uint32")
  field(FTVL, "ULONG")
  field(NELM, "512")
}

# Data buffer transmit memory.

record(waveform, "$(P)$(R)DataBuffer:TX:TransmitData") {
  field(DESC, "Data to be transmitted")
  field(DTYP, "MRF Memory Output")
  field(INP,  "@$(DEVICE) 0x1800 uint32 changed_elements_only")
  field(FTVL, "ULONG")
  field(NELM, "512")
}

# Typically, we only write changed elements. However, sometimes we might want to
# write all elements when something got out of sync.
record(bo, "$(P)$(R)DataBuffer:TX:TransmitData:WriteAll") {
  field(DESC, "Send the whole data buf. to the device")
  field(FLNK, "$(P)$(R)Intrnl:DataBuffer:TX:TransmitData:Copy")
  field(ZNAM, "Write all")
  field(ONAM, "Write all")
}

record(aSub, "$(P)$(R)Intrnl:DataBuffer:TX:TransmitData:Copy") {
  field(SNAM, "mrfArrayCopy")
  field(EFLG, "NEVER")
  field(FTA, "ULONG")
  field(NOA, "512")
  field(INPA, "$(P)$(R)DataBuffer:TX:TransmitData")
  field(FTVA,  "ULONG")
  field(NOVA,  "512")
  field(OUTA, "$(P)$(R)Intrnl:DataBuffer:TX:TransmitData:WriteAll NPP")
  field(FLNK, "$(P)$(R)Intrnl:DataBuffer:TX:TransmitData:WriteAll")
}

record(waveform, "$(P)$(R)Intrnl:DataBuffer:TX:TransmitData:WriteAll") {
  field(DTYP, "MRF Memory Output")
  field(INP,  "@$(DEVICE) 0x1800 uint32 no_read_on_init")
  field(FTVL, "ULONG")
  field(NELM, "512")
}

# Event log register.

# Processing of these records is triggered when the records for the event log
# status register are processed.

record(waveform, "$(P)$(R)Event:Log:Seconds") {
  field(DESC, "Event log seconds entries")
  field(DTYP, "MRF Memory Input")
  field(INP,  "@$(DEVICE) 0x2000 uint32 element_distance=12")
  field(FTVL, "ULONG")
  field(NELM, "512")
  field(FLNK, "$(P)$(R)Event:Log:EventCounters")
}

record(waveform, "$(P)$(R)Event:Log:EventCounters") {
  field(DESC, "Event log event counter entries")
  field(DTYP, "MRF Memory Input")
  field(INP,  "@$(DEVICE) 0x2004 uint32 element_distance=12")
  field(FTVL, "ULONG")
  field(NELM, "512")
  field(FLNK, "$(P)$(R)Event:Log:EventCodes")
}

record(waveform, "$(P)$(R)Event:Log:EventCodes") {
  field(DESC, "Event log event code entries")
  field(DTYP, "MRF Memory Input")
  field(INP,  "@$(DEVICE) 0x2008 uint32 element_distance=12")
  field(FTVL, "UCHAR")
  field(NELM, "512")
  field(FLNK, "$(P)$(R)Event:Log:Offset")
}

